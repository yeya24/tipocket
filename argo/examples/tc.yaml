apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: chaos-tidb-cluster
spec:
  entrypoint: chaos-tidb-cluster
  arguments:
    parameters:
      - name: namespace
        value: yeya24
      - name: storage_class
        value: pd-ssd
      - name: image_version
        value: v3.0.9

  templates:
    - name: chaos-tidb-cluster
      steps:
            # create tidb cluster
        - - name: create-tidb-cluster
            template: create-tidb-cluster

        - - name: wait-tidb-cluster
            template: wait-tidb-cluster

        - - name: get-tidb-ip
            template: get-tidb-ip

        - - name: tpcc-load
            template: tpcc-load
            arguments:
              parameters:
                - name: tidb-ip
                  value: '{{steps.get-tidb-ip.outputs.parameters.tidb-ip}}'

        - - name: tpcc-run
            template: tpcc-run
            arguments:
              parameters:
                - name: tidb-ip
                  value: '{{steps.get-tidb-ip.outputs.parameters.tidb-ip}}'

        - - name: kill-tikv
            template: kill-tikv

            # this step waits some time for chaos testing.
        - - name: create-wf
            template: create-wf
        - - name: wait-wf
            template: wait-wf
            arguments:
              parameters:
                - name: wf-name
                  value: '{{steps.create-wf.outputs.parameters.wf-name}}'

        - - name: delete-tpcc
            template: delete-tpcc
            arguments:
              parameters:
                - name: tpcc-name
                  value: '{{steps.tpcc-run.outputs.parameters.tpcc-name}}'

        - - name: revert-kill-tikv
            template: revert-kill-tikv

        - - name: delete-tidb-cluster
            template: delete-tidb-cluster

    - name: create-tidb-cluster
      resource:
        action: apply
        manifest: |
          apiVersion: pingcap.com/v1alpha1
          kind: TidbCluster
          metadata:
            name: {{workflow.parameters.namespace}}
            namespace: {{workflow.parameters.namespace}}
          spec:
            version: {{workflow.parameters.image_version}}
            imagePullPolicy: IfNotPresent
            pvReclaimPolicy: Delete
            schedulerName: "tidb-scheduler"
            pd:
              baseImage: pingcap/pd
              replicas: 3
              pvReclaimPolicy: Delete
              storageClassName: {{workflow.parameters.storage_class}}
              requests:
                storage: "10Gi"
              config: {}
            tikv:
              baseImage: pingcap/tikv
              replicas: 3
              pvReclaimPolicy: Delete
              storageClassName: {{workflow.parameters.storage_class}}
              requests:
                storage: "10Gi"
              config: {}
            tidb:
              baseImage: pingcap/tidb
              replicas: 2
              service:
                type: NodePort
              config: {}

    - name: wait-tidb-cluster
      resource:
        action: get
        successCondition: status.tidb.statefulSet.readyReplicas==2,status.pd.statefulSet.readyReplicas=3,status.tikv.statefulSet.readyReplicas=3
        manifest: |
          apiVersion: pingcap.com/v1alpha1
          kind: TidbCluster
          metadata:
            name: {{workflow.parameters.namespace}}
            namespace: {{workflow.parameters.namespace}}

    - name: delete-tidb-cluster
      resource:
        action: delete
        manifest: |
          apiVersion: pingcap.com/v1alpha1
          kind: TidbCluster
          metadata:
            name: {{workflow.parameters.namespace}}
            namespace: {{workflow.parameters.namespace}}

    - name: get-tidb-ip
      resource:
        action: get
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            name: {{workflow.parameters.namespace}}-tidb
            namespace: {{workflow.parameters.namespace}}
      outputs:
        parameters:
          - name: tidb-ip
            valueFrom:
              jsonPath: '{.spec.clusterIP}'

    - name: tpcc-load
      inputs:
        parameters:
          - name: tidb-ip
      container:
        name: go-tpc
        image: 'mahjonp/go-tpc'
        command: [sh, -c]
        args: ["/bin/go-tpc tpcc prepare -H {{inputs.parameters.tidb-ip}} \
              -P 4000 --warehouses 10 -T 4 -D test"]

    - name: tpcc-run
      inputs:
        parameters:
          - name: tidb-ip
      resource:
        action: create
        manifest: |
          apiVersion: batch/v1
          kind: Job
          metadata:
            generateName: tpcc-run-
            namespace: {{workflow.parameters.namespace}}
          spec:
            template:
              metadata:
                name: tpcc-run
              spec:
                containers:
                - name: tpcc
                  image: 'mahjonp/go-tpc'
                  command: [sh, -c]
                  args: ["/bin/go-tpc tpcc run -H  {{inputs.parameters.tidb-ip}} \
                          -P 4000 --warehouses 10 -T 4 -D test"]
                restartPolicy: Never
      outputs:
        parameters:
          - name: tpcc-name
            valueFrom:
              jsonPath: '{.metadata.name}'

    - name: delete-tpcc
      inputs:
        parameters:
          - name: tpcc-name
      resource:
        action: delete
        manifest: |
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: {{inputs.parameters.tpcc-name}}
            namespace: {{workflow.parameters.namespace}}

    - name: kill-tikv
      resource:
        action: apply
        manifest: |
          apiVersion: pingcap.com/v1alpha1
          kind: PodChaos
          metadata:
            name: pod-kill-{{workflow.parameters.namespace}}
            namespace: {{workflow.parameters.namespace}}
          spec:
            action: pod-kill
            mode: one
            selector:
              labelSelectors:
                app.kubernetes.io/component: tikv
            scheduler:
              cron: "@every 1m"

    - name: revert-kill-tikv
      resource:
        action: delete
        manifest: |
          apiVersion: pingcap.com/v1alpha1
          kind: PodChaos
          metadata:
            name: pod-kill-{{workflow.parameters.namespace}}
            namespace: {{workflow.parameters.namespace}}

    - name: create-wf
      resource:
        action: create
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Workflow
          metadata:
            generateName: {{workflow.parameters.namespace}}-sleep-
          spec:
            entrypoint: sleep
            templates:
            - name: sleep
              container:
                image: alpine:latest
                command: [sleep, "600"]
      outputs:
        parameters:
          - name: wf-name
            valueFrom:
              jsonPath: '{.metadata.name}'

    - name: wait-wf
      inputs:
        parameters:
          - name: wf-name
      resource:
        action: get
        successCondition: status.phase == Succeeded
        failureCondition: status.phase in (Failed, Error)
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Workflow
          metadata:
            name: {{inputs.parameters.wf-name}}
